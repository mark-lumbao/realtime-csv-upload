import { FastifyInstance } from 'fastify';
import fAsync from 'fs/promises';
import fs from 'fs';
import path from 'path';
import FileType from 'src/types/files';
import { fileUploadSchema } from 'src/schema/upload';
import dirCheck from 'src/utils/route/upload';

const rootRoutes = async (fastify: FastifyInstance) => {
  fastify.route({
    method: 'POST',
    url: '/',
    schema: fileUploadSchema,
    handler: async (request, reply) => {
      const { files } = request.raw as unknown as { files: { file: FileType } };
      const { file } = files;

      const dirPath = path.join(process.cwd(), 'lib/temp');
      const filePath = path.join(dirPath, file.name);

      if (file.mimetype !== 'text/csv') {
        reply.code(400).send(new Error('Invalid file format'));
      } else {
        await dirCheck(dirPath);
        await fAsync.writeFile(filePath, file.data);

        const rStream = fs.createReadStream(filePath);
        rStream.on('end', () => fAsync.rm(filePath));
        
        reply.send(rStream);
      }
    },
  });
};

export default rootRoutes;
